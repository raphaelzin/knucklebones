{"mappings":"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","sources":["backend/src/app.ts","backend/src/routes/game-route.ts","backend/src/models/GameRoom/GameRoom.ts","backend/src/models/GameController.ts","backend/src/models/game/Game.ts","backend/src/models/game/DiceTower.ts","backend/src/models/GameRoom/GameRoomErrors.ts","backend/src/models/rules/DefaultRules.ts"],"sourcesContent":["import { router as gameRouter } from \"./routes/game-route\";\nimport express, { Express } from \"express\";\n\nconst app: Express = express();\napp.use(express.json());\n\napp.use(\"/game\", gameRouter);\n\napp.listen(6000, () => {\n  console.log(`⚡️[server]: Server is running at https://localhost:${6000}`);\n});\n","import { Server as WebSocketServer } from \"socket.io\";\nimport express, { Request, Response } from \"express\";\nimport { GameRoom } from \"../models/GameRoom/GameRoom\";\n\nexport const router = express.Router();\nrouter.use(express.json());\n\nconst rooms: GameRoom[] = [new GameRoom(\"0\")];\nlet counter = 1;\n\nrouter.post(\"/create-game\", async (req: Request, res: Response) => {\n  if (!req.params) {\n    res.statusCode = 404;\n    return;\n  }\n\n  const newRoomCode = `${counter}`;\n  rooms.push(new GameRoom(newRoomCode));\n  counter += 1;\n\n  res.statusCode = 200;\n  res.send(`${newRoomCode} :)`);\n});\n\nconst io = new WebSocketServer(4444, {\n  cors: {\n    origin: \"http://localhost:3000\",\n  },\n});\n\nio.of(\"/game/play\").on(\"connection\", (socket) => {\n  const { roomCode, nickname, token } = socket.handshake.query;\n\n  if (!roomCode || !nickname) {\n    socket.emit(\"bye-bye\", \"Room code or nickname missing.\");\n    socket.disconnect(true);\n    return;\n  }\n\n  const room = getRoom(roomCode as string);\n  if (!room) {\n    socket.emit(\"bye-bye\", `No room with code ${roomCode}.`);\n    socket.disconnect(true);\n    return;\n  }\n\n  try {\n    room.enterGame(socket, nickname as string, token as string | undefined);\n  } catch (error) {\n    socket.emit(\"bye-bye\", `an error: ${error}`);\n    socket.disconnect(true);\n  }\n});\n\nio.of(\"/game/watch\").on(\"connection\", (socket) => {\n  const { roomCode } = socket.handshake.query;\n\n  if (!roomCode) {\n    socket.emit(\"bye-bye\", \"Room code or nickname missing.\");\n    socket.disconnect(true);\n    return;\n  }\n\n  const room = getRoom(roomCode as string);\n  if (!room) {\n    socket.emit(\"bye-bye\", \"No room with that code.\");\n    socket.disconnect(true);\n    return;\n  }\n\n  room.spectateGame(socket);\n});\n\nconst getRoom = (code: string): GameRoom => {\n  // TODO: Get channel on Redis\n\n  for (const room of rooms) {\n    if (room.code == code) return room;\n  }\n  return undefined;\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { GameController, GameControllerInterface } from \"../GameController\";\nimport DefaultRules from \"../rules/DefaultRules\";\nimport { randomUUID } from \"crypto\";\nimport { Socket } from \"socket.io\";\nimport { DefaultEventsMap } from \"socket.io/dist/typed-events\";\nimport { ServerEvent } from \"./GameRoomEvents\";\nimport { GameStateSummary } from \"@knucklebones/shared-models/src/RemoteState\";\nimport { FullHouseError, InvalidPayload } from \"./GameRoomErrors\";\n\ntype IOSocket = Socket<\n  DefaultEventsMap,\n  DefaultEventsMap,\n  DefaultEventsMap,\n  any\n>;\n\ninterface GameRoomClient {\n  socket: IOSocket;\n  token: string;\n  id: string;\n}\n\nexport class GameRoom {\n  controller: GameControllerInterface;\n  players: GameRoomClient[];\n  spectators: GameRoomClient[];\n  code: string;\n\n  constructor(code: string) {\n    this.code = code;\n    this.controller = new GameController(DefaultRules);\n    this.controller.gameStateCallback = (state) => {\n      this.handleGameStateChange(state);\n    };\n\n    this.spectators = [];\n    this.players = [];\n  }\n\n  enterGame(\n    socket: IOSocket,\n    nickname: string,\n    existingId: string | undefined\n  ) {\n    // If user already has an id, he's trying to reconnect.\n    if (existingId) {\n      this.handleReconnectRequest(socket, existingId);\n      return;\n    }\n\n    // if room is full, throw error so router can close socket.\n    if (this.controller.gameIsFull()) {\n      this.emit(socket, { kind: \"error\", error: FullHouseError });\n      socket.disconnect(true);\n      return;\n    }\n\n    const id = randomUUID();\n    const token = randomUUID();\n    const client: GameRoomClient = { id, socket, token };\n    console.log(`token: ${token}`);\n    this.emit(socket, { kind: \"welcome\", id, token });\n    this.setupListeners(socket);\n\n    this.players.push(client);\n    this.controller.enterGame(nickname, id);\n  }\n\n  spectateGame(socket: IOSocket) {\n    const id = randomUUID();\n    const token = randomUUID();\n    const client: GameRoomClient = { id, socket, token };\n\n    this.emit(socket, { kind: \"welcome\", id, token });\n    this.spectators.push(client);\n  }\n\n  setupListeners(socket: IOSocket) {\n    socket.on(\"game-event\", (payload) => {\n      this.handlePlay(socket, payload);\n    });\n  }\n\n  handlePlay(socket: IOSocket, payload: any) {\n    const { column, token } = payload;\n\n    const player = this.players.filter((p) => p.token == token)[0];\n\n    if (column === undefined || !player) {\n      this.emit(socket, {\n        kind: \"error\",\n        error: InvalidPayload(\"Invalid or missing Column or token\", payload),\n      });\n      return;\n    }\n\n    try {\n      this.controller.play(column, player.id);\n    } catch (error) {\n      this.emit(socket, { kind: \"error\", error });\n    }\n  }\n\n  handleReconnectRequest(socket: IOSocket, token: string) {\n    const player = this.players.filter((p) => p.token == token)[0];\n    if (!player) {\n      this.emit(socket, {\n        kind: \"reconnect\",\n        success: false,\n        error: `No player with token \"${token}\" in this room.`,\n      });\n      return;\n    }\n\n    // Replaces socket with new one.\n    player.socket = socket;\n\n    // Confirm reconnection.\n    this.setupListeners(socket);\n    this.emit(socket, { kind: \"reconnect\", success: true, id: player.id });\n    this.emit(socket, {\n      kind: \"game-state-update\",\n      state: this.controller.gameStateSummary,\n    });\n  }\n\n  emit(socket: IOSocket, event: ServerEvent) {\n    socket.emit(event.kind, event);\n  }\n\n  handleGameStateChange(state: GameStateSummary) {\n    for (const client of [...this.players, ...this.spectators]) {\n      this.emit(client.socket, { kind: \"game-state-update\", state });\n    }\n  }\n}\n","import { createBoardState, Game } from \"./game/Game\";\nimport { Rules } from \"./rules/Rules\";\nimport DiceTower, { DiceTowerInterface } from \"./game/DiceTower\";\nimport {\n  GameStateSummary,\n  GameState,\n  Turn,\n} from \"@knucklebones/shared-models/src/RemoteState\";\n\nimport {\n  ColumnFullError,\n  InvalidMoveError,\n  WrongTurnError,\n} from \"./GameRoom/GameRoomErrors\";\n\nexport interface GameControllerInterface {\n  gameStateSummary: GameStateSummary;\n  game: Game;\n  gameStateCallback?: (state: GameStateSummary) => void;\n\n  enterGame(nickname: string, identifier: string): void;\n  gameIsFull(): boolean;\n  play(col: number, playerId: string): void;\n}\n\nexport class GameController implements GameControllerInterface {\n  gameStateSummary: GameStateSummary;\n  game: Game;\n  gameStateCallback?: (event: GameStateSummary) => void = undefined;\n  diceTower: DiceTowerInterface;\n\n  constructor(rules: Rules, diceTower: DiceTowerInterface = DiceTower) {\n    this.diceTower = diceTower;\n    this.game = { rules: rules, players: [] };\n    this.gameStateSummary = this.createState({\n      kind: \"waiting-player\",\n    });\n  }\n\n  gameIsFull(): boolean {\n    return this.game.players.length == this.game.rules.numberOfPlayers;\n  }\n\n  enterGame(nickname: string, identifier: string) {\n    const board: number[][] = [];\n    for (let i = 0; i < this.game.rules.boardSize; i++) board.push([]);\n\n    this.game.players.push({\n      identifier: identifier,\n      nickname: nickname,\n      board: board,\n    });\n\n    // Reached the number of players, start game.\n    if (this.game.players.length == this.game.rules.numberOfPlayers) {\n      this.gameStateSummary = this.createState(\n        this.createNextTurn(this.game.players[0].identifier)\n      );\n      this.gameStateCallback(this.gameStateSummary);\n    }\n  }\n\n  play(col: number, playerId: string) {\n    if (this.gameStateSummary.state.kind != \"turn\") throw InvalidMoveError;\n    if (this.gameStateSummary.state.playerId != playerId) throw WrongTurnError;\n\n    const die = this.gameStateSummary.state.die;\n    const player = this.game.players.filter((p) => p.identifier == playerId)[0];\n\n    // If the column is already full, throw error.\n    if (player.board[col].length >= this.game.rules.boardSize || col < 0)\n      throw ColumnFullError;\n\n    for (const player of this.game.players) {\n      if (player.identifier != playerId) {\n        // Removes instances of die in that column of other players\n        player.board[col] = player.board[col].filter((x) => x != die);\n      } else {\n        // Adds die to current player\n        player.board[col].push(die);\n      }\n    }\n\n    // Finish game if applicable\n    if (this.game.rules.evaluateGameEnd(this.game)) {\n      this.finishGame();\n      return;\n    }\n\n    this.gameStateSummary = this.createState(this.createNextTurn(playerId));\n    this.gameStateCallback(this.gameStateSummary);\n  }\n\n  finishGame() {\n    let bestScore = -1;\n    let winnerId: string | undefined = undefined;\n\n    for (const player of this.game.players) {\n      const score = this.game.rules.calculateScore(player.board);\n      if (score > bestScore) {\n        bestScore = score;\n        winnerId = player.identifier;\n      } else if (score == bestScore) {\n        winnerId = undefined;\n      }\n    }\n\n    if (!winnerId) {\n      this.gameStateSummary = this.createState({ kind: \"tie\" });\n    } else {\n      this.gameStateSummary = this.createState({\n        kind: \"win\",\n        winnerId,\n      });\n    }\n\n    this.gameStateCallback(this.gameStateSummary);\n  }\n\n  // Helper functions\n\n  nextPlayerAfter(playerId: string): string {\n    const ids = this.game.players.map((p) => p.identifier);\n    const index = ids.indexOf(playerId);\n    const id = ids[(index + 1) % ids.length];\n    return id;\n  }\n\n  createNextTurn(previousPlayer: string): Turn {\n    return {\n      kind: \"turn\",\n      playerId: this.nextPlayerAfter(previousPlayer),\n      die: this.diceTower.throwDice(1, this.game.rules.dieCount),\n    };\n  }\n\n  createState(state: GameState): GameStateSummary {\n    return {\n      boardState: createBoardState(this.game),\n      state: state,\n    };\n  }\n}\n","import { Rules } from \"../rules/Rules\";\nimport {\n  BoardState,\n  PlayerBoardState,\n} from \"@knucklebones/shared-models/src/RemoteState\";\n\nexport interface Player {\n  identifier: string;\n  nickname: string;\n  board: number[][];\n}\n\nexport interface Game {\n  players: Player[];\n  rules: Rules;\n}\n\nexport function createBoardState(game: Game): BoardState {\n  const state: { [key: string]: PlayerBoardState } = {};\n  for (const player of game.players) {\n    state[player.identifier] = {\n      nickname: player.nickname,\n      board: player.board,\n      score: game.rules.calculateScore(player.board),\n    };\n  }\n\n  return { players: state };\n}\n\nexport function getPlayer(id: string, game: Game): Player | undefined {\n  for (const player of game.players) {\n    if (player.identifier == id) return player;\n  }\n\n  return undefined;\n}\n","export interface DiceTowerInterface {\n  throwDice(diceCount: number, sides: number): number;\n}\n\nclass DiceTower implements DiceTowerInterface {\n  throwDice(diceCount: number, sides: number): number {\n    return Math.floor(Math.random() * sides * diceCount) + 1;\n  }\n}\n\nexport default new DiceTower();\n","// Play Errors\nexport type ErrorDomain = \"game\" | \"game-room\";\n\nexport interface GameError {\n  error: string;\n  domain: ErrorDomain;\n  debugMessage?: string;\n  message: string;\n}\n\nexport const ColumnFullError: GameError = {\n  error: \"column-full\",\n  domain: \"game\",\n  message: \"The selected column is already full\",\n};\n\nexport const WrongTurnError: GameError = {\n  error: \"wrong-player-turn\",\n  domain: \"game\",\n  message: \"It is not your turn.\",\n};\n\nexport const InvalidMoveError: GameError = {\n  error: \"invalid-move\",\n  domain: \"game\",\n  message: \"This is an invalid play\",\n};\n\nexport const InvalidColumn: GameError = {\n  error: \"invalid-column\",\n  domain: \"game\",\n  message: \"The selected column is not valid.\",\n};\n\nexport const FullHouseError: GameError = {\n  error: \"full-house\",\n  domain: \"game\",\n  message: \"This game is already full. Consider entering as a spectator\",\n};\n\nexport const InvalidPayload = (\n  message: string,\n  debugMessage: string = undefined\n): GameError => {\n  return {\n    error: \"invalid-payload\",\n    domain: \"game-room\",\n    message,\n    debugMessage,\n  };\n};\n","import { Game } from \"../game/Game\";\nimport { Rules } from \"./Rules\";\n\nclass DefaultRules implements Rules {\n  dieCount = 6;\n  boardSize = 3;\n  numberOfPlayers = 2;\n\n  evaluateGameEnd(game: Game): boolean {\n    const boards = game.players.map((p) => p.board);\n\n    for (const key in boards) {\n      const board = boards[key];\n      let isFull = true;\n      for (const col of board) {\n        if (col.length != this.boardSize) {\n          isFull = false;\n          break;\n        }\n      }\n\n      if (isFull) return true;\n    }\n\n    return false;\n  }\n\n  calculateScore(board: number[][]): number {\n    let score = 0;\n\n    let occurrencesDict: { [key: number]: number } = {};\n    for (const column of board) {\n      occurrencesDict = {};\n\n      for (const num of column) {\n        occurrencesDict[num] = (occurrencesDict[num] ?? 0) + 1;\n      }\n\n      for (const key in occurrencesDict) {\n        if (occurrencesDict[key] == 2) {\n          score = score + parseInt(key) * 4;\n        } else if (occurrencesDict[key] == 3) {\n          score = score + parseInt(key) * 7;\n        } else {\n          score += parseInt(key);\n        }\n      }\n    }\n\n    return score;\n  }\n}\n\nexport default new DefaultRules();\n"],"names":[],"version":3,"file":"app.js.map"}